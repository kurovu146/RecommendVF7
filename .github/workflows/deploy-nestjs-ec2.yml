name: Deploy NestJS to AWS EC2 (Fedora)

on:
  push:
    branches:
      - main # Chỉ chạy khi có push lên nhánh 'main'

jobs:
  #--------------------------------------------------
  # JOB 1: BUILD AND TEST (CI)
  #--------------------------------------------------
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.16.0] # Chỉ định phiên bản Node.js bạn dùng

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code (Optional)
        run: npm run lint --if-present

      - name: Run tests (Optional)
        run: npm run test --if-present

      - name: Build NestJS application
        run: npm run build

      - name: Prepare deployment package
        run: |
          mkdir deploy-package
          cp -R dist deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          if [ -d "prisma" ]; then cp -R prisma deploy-package/; fi
          # cp ecosystem.config.js deploy-package/ # Nếu dùng PM2 ecosystem file
          cd deploy-package
          zip -r ../deploy-package.zip .
          cd ..

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: nestjs-app-build
          path: deploy-package.zip
          retention-days: 7

  #--------------------------------------------------
  # JOB 2: DEPLOY TO EC2 (CD)
  #--------------------------------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nestjs-app-build

      - name: List files after download (for debugging)
        run: ls -la

      - name: SCP (Copy) artifact to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "deploy-package.zip"
          target: "/home/${{ secrets.EC2_USERNAME }}/"

      - name: SSH into EC2 and run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }} 
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            # --- Biến môi trường cho script trên EC2 ---
            APP_DIR="/var/www/your-nestjs-app" # QUAN TRỌNG: Kiểm tra lại đường dẫn này
            PM2_APP_NAME="your-nestjs-app-name" # QUAN TRỌNG: Đặt tên PM2 cho ứng dụng
            REMOTE_USER_HOME="/home/${{ secrets.EC2_USERNAME }}"
            ZIP_FILE="$REMOTE_USER_HOME/deploy-package.zip"

            echo "--- Starting deployment on EC2 ---"

            echo "0. Ensuring SSH user owns the application directory..."
            # Tạo thư mục nếu chưa có và đặt quyền sở hữu cho user SSH
            sudo mkdir -p $APP_DIR
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} $APP_DIR # Quan trọng: chown cả thư mục APP_DIR

            echo "1. Navigating to application directory: $APP_DIR"
            sudo mkdir -p $APP_DIR # Đảm bảo thư mục tồn tại
            cd $APP_DIR

            echo "2. Removing old application files..."
            sudo find $APP_DIR -mindepth 1 -path $APP_DIR/.env -prune -o -exec rm -rf {} \;

            echo "3. Extracting new application files from $ZIP_FILE to $APP_DIR..."
            sudo unzip -o $ZIP_FILE -d $APP_DIR

            echo "4. Setting correct ownership for extracted files..."
            # Đảm bảo user ssh có quyền sở hữu
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} $APP_DIR/*

            echo "5. Installing/updating production dependencies in $APP_DIR..."
            # Đảm bảo Node.js và npm đã được cài đặt và có trong PATH
            # Nếu dùng NVM, script đăng nhập của usercần source NVM
            # để các lệnh 'npm' và 'node' được nhận diện trong phiên SSH không tương tác này.
            # Hoặc bạn có thể source NVM trực tiếp trong script:
            export NVM_DIR="$REMOTE_USER_HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            npm ci --omit=dev --prefix $APP_DIR

            echo "5.5. Generating Prisma Client..."
            npx prisma generate --schema=$APP_DIR/prisma/schema.prisma

            echo "6. Restarting application with PM2 (Name: $PM2_APP_NAME)..."
            NESTJS_ENTRY_POINT="$APP_DIR/dist/main.js"

            pm2 describe $PM2_APP_NAME > /dev/null
            if [ $? -eq 0 ]; then
              echo "Reloading PM2 application: $PM2_APP_NAME"
              pm2 reload $PM2_APP_NAME --update-env
            else
              echo "Starting new PM2 application: $PM2_APP_NAME"
              pm2 start $NESTJS_ENTRY_POINT --name $PM2_APP_NAME
            fi
            # pm2 save # Chạy lệnh này thủ công một lần đầu trên server để PM2 tự khởi động sau reboot

            echo "7. Cleaning up the zip file on EC2..."
            sudo rm $ZIP_FILE

            echo "--- Deployment to EC2 complete ---"